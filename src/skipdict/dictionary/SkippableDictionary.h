/**
 * Automatically generated by Zserio C++ extension version 1.0.
 */

#ifndef SKIPDICT_DICTIONARY_SKIPPABLE_DICTIONARY_H
#define SKIPDICT_DICTIONARY_SKIPPABLE_DICTIONARY_H

#include <zserio/BitStreamReader.h>
#include <zserio/BitStreamWriter.h>
#include <zserio/BitFieldUtil.h>
#include <zserio/CppRuntimeException.h>
#include <zserio/StringConvertUtil.h>
#include <zserio/PreWriteAction.h>
#include <zserio/BitFieldArray.h>
#include <zserio/ObjectArray.h>
#include <zserio/Types.h>

#include "skipdict/dictionary/DictEntry.h"

namespace skipdict
{
namespace dictionary
{

class SkippableDictionary
{
public:
    SkippableDictionary();
    SkippableDictionary(zserio::BitStreamReader& _in);

    zserio::UInt32Array& getOffsets();
    const zserio::UInt32Array& getOffsets() const;
    void setOffsets(const zserio::UInt32Array& offsets);

    zserio::ObjectArray<skipdict::dictionary::DictEntry>& getEntries();
    const zserio::ObjectArray<skipdict::dictionary::DictEntry>& getEntries() const;
    void setEntries(const zserio::ObjectArray<skipdict::dictionary::DictEntry>& entries);

    size_t bitSizeOf(size_t _bitPosition = 0) const;
    size_t initializeOffsets(size_t _bitPosition);

    bool operator==(const SkippableDictionary& other) const;
    int hashCode() const;

    void read(zserio::BitStreamReader& _in);
    void write(zserio::BitStreamWriter& _out,
            zserio::PreWriteAction _preWriteAction = zserio::ALL_PRE_WRITE_ACTIONS);

private:
    zserio::UInt32Array m_offsets;
    zserio::ObjectArray<skipdict::dictionary::DictEntry> m_entries;
};

} // namespace dictionary
} // namespace skipdict

#endif // SKIPDICT_DICTIONARY_SKIPPABLE_DICTIONARY_H
